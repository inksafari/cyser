[help]
    autocorrect = 1

[core]
    attributesfile    = $XDG_CONFIG_HOME/git/attributes
    commentchar       = ";"
    editor            = code --wait
    excludesfile      = $XDG_CONFIG_HOME/git/ignore
    hooksPath         = $XDG_CONFIG_HOME/git/hooks
    pager             = less -JFRSX --tabs=4    # or `less -RFXx1,5`
    precomposeUnicode = true
    quotepath         = false
    whitespace        = fix,-indent-with-non-tab,trailing-space,cr-at-eol

[pager]
    # diff-hightlight ( since Git v2.9 ) or so-fancy/diff-so-fancy
    # .bash_profile: export PATH=/usr/share/doc/git/contrib/diff-highlight:$PATH ( Ubuntu )
    diff       = diff-so-fancy | $(git config core.pager)
    log        = diff-so-fancy | $(git config core.pager)
    show       = diff-so-fancy | $(git config core.pager)

[interactive]
    diffFilter = diff-so-fancy

[gpg]
    program = gpg2

# http://blog.gypsydave5.com/2016/02/20/pre-commit-hooks-in-git/
# [init]
# templatedir = $XDG_CONFIG_HOME/git/template

[commit]
    # gpgsign  = if-asked
    template = $XDG_CONFIG_HOME/git/message
    verbose  = true

[fetch]
    recurseSubmodules = true
    prune = true

[filter "lfs"]
    required = true
    clean    = git-lfs clean -- %f
    smudge   = git-lfs smudge -- %f

[filter "media"]
    required = true
    clean    = git media clean %f
    smudge   = git media smudge %f

[grep]
    extendregexp = true

[log]
    abbrevCommit = true
    decorate     = short
    # mailmap    = true

[pretty]
    # https://git-scm.com/docs/pretty-formats
    # %x09    Tab
    # %h      Commit Hash(short) <=> %H (full)
    # %an     Author Name
    # %ad     Author Date
    # %cn     Comitter Name
    # %cd     Comitter Date
    # %s      message
    # %d      branch/tag
    # %C(red bold) start color
    #    [color] = [normal, black, red, green, yellow, blue, magenta, cyan, white]
    #    [style] = [bold, dim, ul, blink, reverse]
    # %C(reset)  reset color
    nice = "format:%C(green)%ad%Creset %C(bold cyan)%h%Creset -%C(bold yellow)%d%Creset %s %C(bold blue)[%an]%Creset"
    # for --relative-date
    nic2 = "format:%C(cyan)%h%Creset -%C(bold yellow)%d%Creset %s %C(dim)[%an]%Creset %C(green)%ad%Creset"
    # for `git reflog`
    relg = "%C(cyan)%h%Creset %gd %gs %Cgreen(%cr)%Creset"

[branch]
    # Automatic remote tracking
    autoSetupMerge = always
    # Force all new branches to automatically use rebase
    autoSetupRebase = always

[pull]
    rebase = true

[push]
    default = simple

[rebase]
    autoStash = true
    autoSquash = true

# See https://help.github.com/articles/checking-out-pull-requests-locally
[remote "origin"]
    fetch = +refs/pull/*/head:refs/remotes/origin/pr/*

[submodule]
    # Fetch submodules in parallel, with a reasonable number of jobs
    fetchJobs = 4

[tag]
    sort = version:refname

#[tar "tar.xz"]
#    command = xz -c

# ============================================================================
# Plugins
# ============================================================================
# {so-fancy/diff-so-fancy, motemen/ghq, github/hub}

#[diff-so-fancy]

#[ghq]
#    root = ~/src
#    root = ~/go/src
#[ghq "alias"]
#[ghq "import"]
#    starred = github-list-starred
#    user = getgithubrepos

[hub]
    protocol = https

# ============================================================================
# Colors / Colours
# ============================================================================

[color]
    ui           = auto

[color "branch"]
    current      = green
    local        = yellow
    remote       = cyan

[color "diff"]
    commit       = green bold
    frag         = magenta bold
    meta         = yellow bold
    new          = green bold
    old          = red bold
    whitespace   = red reverse

[color "diff-highlight"]
    oldNormal    = red bold
    oldHighlight = red bold 52
    newNormal    = green bold
    newHighlight = green bold 22

[color "grep"]
    filename     = yellow bold
    linenumber   = green
    match        = blue bold 

[color "status"]
    added        = green
    changed      = yellow
    untracked    = red


# ============================================================================
# Programs
# ============================================================================

[gui]
    fontui = -family \"Consolas\" -size 12 -weight normal -slant roman -underline 0 -overstrike 0
    fontdiff = -family \"Consolas\" -size 12 -weight normal -slant roman -underline 0 -overstrike 0
    commitmsgwidth = 80
    diffcontext = 10
    encoding = utf-8

[i18n]
    commitencoding    = utf-8
    logoutputencoding = utf-8

# https://git-scm.com/docs/gitattributes#_defining_a_custom_hunk_header
# https://github.com/git/git/blob/master/userdiff.c
# https://www.emacswiki.org/emacs/GitForEmacsDevs
# https://www.reddit.com/r/emacs/comments/4gudyw/
# https://github.com/vigente/gerardus/wiki/Integrate-git-diffs-with-word-docx-files
# https://jiegec.github.io/programming/2016/07/23/a-good-way-to-show-git-diff-for-compressed-files/
[diff]
    algorithm           = patience
    compactionHeuristic = true
[diff "nodiff"]
    command             = true
[diff "bin"]
    textconv            = hexdump -v -C
[diff "utf-16"]
    textconv            = iconv -f utf-16 -t utf-8
[diff "pandoc2md"]
    textconv            = pandoc --to=commonmark --columns=80
    prompt              = false
[diff "lisp"]
    # xfuncname         = "^\\([^ ]+ [^ ]+"
    # xfuncname         = "^(\\(.*)$"
    xfuncname           = "^(\\((def|.*let|with-).*)$"
[diff "org"]
    xfuncname           = "^\\*+ +.*$"
[diff "tex"]
    xfuncname           = "^(\\\\(sub)*section\\{.*)$"
    wordRegex           = "\\\\[a-zA-Z]+|[{}]|\\\\.|[^\\{}[:space:]]+"
[diff "texinfo"]
    xfuncname           = "^@node[ \t][ \t]*\\([^,][^,]*\\)"
[diff "xml"]
    textconv            = xmllint --format --recover
[diff "pdf"]
    textconv            = pdfinfo
[diff "zip"]
    textconv            = unzip -v
    binary              = true
[difftool]
    prompt              = false
# https://abenori.blogspot.com/2016/06/latexdiff.html
[difftool.latex]
    # cmd = latexdiff "$LOCAL" "$REMOTE" --exclude-textcmd="section,subsection,subsubsection"
    cmd = latexdiff -t CFONT -s COLOR "$LOCAL" "$REMOTE" > "$REMOTE.diff.tex" && latexmk --pdf "$REMOTE.diff.tex" && latexmk -c "$REMOTE.diff.tex"

# Merge Conflict
# --------------
# tools: 
#       - https://www.slant.co/topics/1324/~diff-tools-for-git
#       - http://www.deltawalker.com/
#       - https://yousseb.github.io/meld/
# [merge]
# algorithm       = patience
# conflictstyle   = diff3
# ff              = only
# [mergetool]
# prompt          = false
# keepBackup      = false
# keepTemporaries = false
# [mergetool "meld_diff3"]
# cmd             = open -W -a Meld --args --auto-merge \"$PWD/$LOCAL\" \"$PWD/$BASE\" \"$PWD/$REMOTE\" --output=\"$PWD/$MERGED\"
# trustExitCode   = true

# gitweb
# ------
#   - https://git-scm.com/docs/git-instaweb
#   - tools:  git.wiki.kernel.org/index.php/Interfaces,_frontends,_and_tools
#             github.com/alberthier/git-webui
[instaweb]
    browser = chromium
    httpd   = webrick
    local   = true
    port    = 8888
    
# ============================================================================
# Aliases
# ============================================================================

# git clone gh:user/repo
[url "git@github.com:"]
    insteadOf = "gh:"
    pushInsteadOf = "github:"
    pushInsteadOf = "git://github.com/"
    pushInsteadOf = "https://github.com/"

[url "git@gist.github.com:"]
    insteadOf = "gst:"
    pushInsteadOf = "gist:"
    pushInsteadOf = "git://gist.github.com/"
    pushInsteadOf = "https://gist.github.com/"

[url "git@bitbucket.org:"]
    insteadOf = "bbt:"
    pushInsteadOf = "git://bitbucket.org/"
    pushInsteadOf = "https://bitbucket.org/"

[alias]
    # 
    # misc ( aliases, status, ... )    
    #
    # https://github.com/yulii/dotfiles/blob/master/.gitconfig
    # https://github.com/blaenk/dots/blob/master/git/.gitconfig
    # fzf list aliases
    # aliases = "! TMUX_FZF=1 zsh -i -c fzf-git-aliases"
    as = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\ \t => \\2/' | sort
    get = !git pull --rebase && git submodule update --init --recursive
    get-ign = "!f() { curl -L -s https://www.gitignore.io/api/$@; }; f"
    gg = grep --break --heading --line-number
    rv = remote -v
    sc = clone --depth=1
    ss = show-branch --sha1-name
    st = status --short --branch
    rmc = rm --cached
    # https://github.com/anishathalye/dotfiles/blob/master/gitconfig
    tar = ! "tar() { git archive --format tar --prefix=\"${PWD##*/}/\" HEAD -o ${1}; }; tar"
    targz = ! "targz() { git archive --format tar.gz --prefix=\"${PWD##*/}/\" HEAD -o ${1}; }; targz"
    zip = ! "zip() { git archive --format zip --prefix=\"${PWD##*/}/\" HEAD -o ${1}; }; zip"

    #
    # ls-files
    #
    ls-del = ls-files -d
    ls-mod = ls-files -m
    ls-new = ls-files --exclude-standard -o
    ls-ign = ls-files --exclude-standard -o -i

    #
    # branch
    #
    bm = branch --merged
    bn = branch --no-merged
    br = branch --all -vv        # Show all the branches including origin
    brs = for-each-ref --sort=-committerdate --format="%(committerdate:relative)%09%(refname:short)" refs/heads  
    del-bm = "!git co master && git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

    #
    # git-flow ( https://github.com/{petervanderdoes/gitflow-avh, Wirone/5cc2f380db031a9d94f4eb449db8c72a/ } )
    #


    #
    # stash ( saved working directory and index )
    #
    sta = stash apply                  # restore changes
    std = stash drop                   # destory changes
    sth = stash --keep-index
    stu = stash --include-untracked
    stl = stash list
    sts = stash show
    stp = stash pop
    ## https://github.com/hypnoglow/dotfiles/blob/master/git/gitconfig
    snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
    snapshots = !git stash list --grep snapshot

    #
    # checkout
    #
    co = checkout

    #
    # tags
    #
    # https://github.com/OzzyCzech/dotfiles/blob/master/.gitconfig

    #
    # log
    #   - https://git-scm.com/docs/git-log
    #   - https://gist.github.com/datagrok/4221767
    #
    who   = shortlog --summary --numbered --no-merges
    las2  = log --pretty=format:"%h" --reverse -2  # usage: git last | pbcopy
    today = shortlog --since=midnight
    week  = shortlog --since=one.week.ago
    lg = log --graph --topo-order --date=relative --pretty=nic2 --all --boundary # master...dev
    lt = log --graph --topo-order --date=short --pretty=nice --stat
    rg = reflog --pretty=relg
    
    #
    # diff                    
    #       last commit(HEAD) <-[staged]-> index <-[unstaged]-> work tree
    #           ^-----------------------[changed]-------------------^
    #
    df = diff --patch-with-stat             # unstaged    
    ds = diff --patch-with-stat --cached    # staged
    dh = diff --patch-with-stat HEAD^ HEAD
    # Latexdiff
    ldiff = difftool -y -t latex

    #
    # merge
    #
    # mt = merge tool "meld_diff3"
    # conflicts = "!$EDITOR $(git diff --name-only --diff-filter=U)" # for Vim

    #
    # add                        # working tree ( untracked, unstaged ) -> staging area
    #
    aa     = add -A
    ours   = !"f() { git checkout --ours $@ && git add $@; }; f"
    theirs = !"f() { git checkout --theirs $@ && git add $@; }; f"
        
    #
    # commit                     # staging area ( index / cache ) -> local repo ( HEAD )
    #
    cm = commit -m               # single line commit message
    ct = commit                  # with commit template

    #
    # gitweb
    #
    serv = instaweb

    #
    # reset ( !! )
    # 
    umod = checkout $(git ls-files --modified)
    undo = reset HEAD^ --soft
    wipe = reset HEAD^ --hard
    wip2 = reset HEAD^^ --hard
    wip3 = reaet HEAD~3 --hard

    #
    # push
    #
    publish = !"git push --set-upstream origin $(git rev-parse --abbrev-ref HEAD)"
    unpublish = !"git push origin :$(git rev-parse --abbrev-ref HEAD)"

[user]
    useConfigOnly = true

[include]
    path = ~/.own/inksafari.local      # for my username and email address
